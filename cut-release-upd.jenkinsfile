import groovy.json.JsonSlurper

def checkoutService(gitRepo, gitBranch) {
    //bitbucket account id from jenkins
    def git_credentials_id = "bitbucket_bbcloudapi"
    def gitBranchParameter = "${gitBranch}".toString()
    checkout([$class: 'GitSCM',
          branches: [[name: "${gitBranchParameter}"]],
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [],
          userRemoteConfigs: [[url: "https://bitbucket.org/ntsttech/${gitRepo}.git", credentialsId: "${git_credentials_id}"]],
         ])
}

def getArtifactsFromS3(s3Bucket, s3Folder, artifactToGet, updName, localFolder, scriptName) {
    //This will download the zip(s) from the S3 location.
    powershell(returnStdout: true, script: """
        Using module \"${ENV:WORKSPACE}\\Powershell\\mubo_core.psm1\";
        
        function Invoke-GetArtifacts {
            & (Get-ScriptDirectory -PostPath \"${ENV:WORKSPACE}\\Powershell\\""" + scriptName + """\") `
                -S3Folder \"""" + s3Folder + """\" -ArtifactToGet \"""" + artifactToGet + """\" -UPDName \"""" + updName + """\" -S3Bucket \"""" + s3Bucket + """\" -LocalFolder \"""" + localFolder + """\";
        }
        
        function Main {
            Invoke-GetArtifacts;
        }
        
        Main
     """)
}

def cleanUpArtifacts(localFolder, scriptName) {
    //This will go delete the files from the Jenkins Node
    powershell(returnStdout: true, script: """
        Using module \"${ENV:WORKSPACE}\\Powershell\\mubo_core.psm1\";
        
        function Invoke-CleanUpArtifacts {
            & (Get-ScriptDirectory -PostPath \"${ENV:WORKSPACE}\\Powershell\\""" + scriptName + """\") `
                -LocalFolder \"""" + localFolder + """\";
        }
        
        function Main {
            Invoke-CleanUpArtifacts;
        }
        
        Main
     """)
}

pipeline {
    agent none
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '1'))
    }
    
    stages {
    
        stage('clean-workspace') {
            agent {label 'msbuild'}
            steps {
                // Clean before build
                cleanWs()
            }
        }
        stage('checkout-source-code') {
            agent {label 'msbuild'}
            // checkout from git
            steps {
                checkoutService("${git_repo}","${git_branch}")
            }
        }
        stage('get-artifacts') {
            agent {label 'msbuild'}
            steps {
                getArtifactsFromS3("${S3_Bucket}","upd","upd","${UPD_Name}", "${ENV:WORKSPACE}\\ntst-artifactory-promote-upd", "get-mubo-artifacts-from-s3.ps1")
                
            }
        }
        stage ('Upload Artifacts to Artifactory'){
            agent {label 'msbuild'}
            environment {
                updName = "${UPD_Name.replace(".zip", "").replace("_Hosting","")}"
            }
            steps {
                rtUpload (
                    serverId: "artifactory-cloud",
                    spec:
                        """{
                        "files": [
                            {
                            "pattern": "ntst-artifactory-promote-upd\\${updName}_Hosting.zip",
                            "target": "myunity-backoffice-local/upd/${updname}/",
                            "explode": "true"
                            }
                        ]
                        }"""
                )
            }
        }
        stage('cleanup-artifacts') {
            agent {label 'msbuild'}
            steps {
                cleanUpArtifacts("${ENV:WORKSPACE}\\ntst-artifactory-promote-upd", "cleanup-promoted-artifacts.ps1")
            }
        }
    }
}