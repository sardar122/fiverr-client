#!/usr/bin/env groovy
import groovy.json.JsonSlurper
if (env.JENKINS_URL.contains('myunity-bo-prod-jenkins')) {
    environmentA = "prod"
    environmentB = "uat"
    prod_backup_retention = "full"
    nonprod_backup_retention = "14days"
    prod_automatic_patch_tag = "general-prod"
    nonprod_automatic_patch_tag = "general-dev"
    prod_patch_group_tag = "general-windows-prod"
    nonprod_patch_group_tag = "general-windows-dev"
    cost_center  = "2016 Hosting - Post Acute"
}
else if (env.JENKINS_URL.contains('myunity-bo-test-jenkins')){
    environmentA = "qa"
    environmentB = "dev"
    prod_backup_retention = "14days"
    nonprod_backup_retention = "14days" 
    prod_automatic_patch_tag = "general-dev"
    nonprod_automatic_patch_tag = "general-dev"
    prod_patch_group_tag = "general-windows-dev"
    nonprod_patch_group_tag = "general-windows-dev"
    cost_center  = "5027 RD - myUnity Homecare and Hospice"
}
else{
    error("Unknown Jenkins instance... Exiting")
}

def checkoutService(gitRepo, gitBranch) {
    //bitbucket account id from jenkins
    def git_credentials_id = "bitbucket_bbcloudapi"
    def gitBranchParameter = "${gitBranch}".toString()
    checkout([$class: 'GitSCM',
          branches: [[name: "${gitBranchParameter}"]],
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [],
          userRemoteConfigs: [[url: "https://bitbucket.org/ntsttech/${gitRepo}.git", credentialsId: "${git_credentials_id}"]],
    ])
}

node(label: 'msbuild'){
    def workspace = "${env.WORKSPACE}"
    def cfn_repo = "${workspace}\\cfn"

    // checkout from git
    stage("checkout-tools"){
        dir("${cfn_repo}"){
            checkoutService("mubo-devops","COA-4420") //TODO change back to master before final merge
        }
        dir("${cfn_repo}"){
            checkoutService("mubo-devops","CRMChangesButMore")
        }
    }

    stage("gather-info"){
        dir("${cfn_repo}"){
            if ("${environment}" == "prod"){
                prefix = "${environmentA}"
                resource_name_prefix = "p"
                backup_retention = "${prod_backup_retention}"
                automatic_patch_tag = "${prod_automatic_patch_tag}"
                patch_group_tag = "${prod_patch_group_tag}"
            }
            else{
                prefix = "${environmentB}"
                resource_name_prefix = "t"
                backup_retention = "${prod_backup_retention}" 
                automatic_patch_tag = "${prod_automatic_patch_tag}"
                patch_group_tag = "${prod_patch_group_tag}"
            }

            service = "myunity"
            ec2_cfn_stack_name   = "${prefix}-ec2-crm"
            iam_cfn_stack_name   = "${prefix}-ec2-crm-iam-multitenant"
            sg_cfn_stack_name    = "${prefix}-ec2-crm-sg-multitenant"
            eni_cfn_stack_name = "${prefix}-eni-crm-instance-multitenant"
            ebs_cfn_stack_name = "${prefix}-ec2-crm-ebs-multitenant"
            ssm_cfn_stack_name = "${prefix}-ec2-crm-ssm-multitenant"
            vpc_id                  = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${service}-${prefix}-vpc VpcId",returnStdout: true).trim()

            crm_iam_arn                 = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${iam_cfn_stack_name} CRMIamRole",returnStdout: true).trim()
            crm_iam_instance_profile    = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${iam_cfn_stack_name} CRMIamInstanceProfile",returnStdout: true).trim()
            echo "IAM ARN: ${crm_iam_arn}"
            echo "Instance Profile: ${crm_iam_instance_profile}"

            ec2_sg_arn = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${sg_cfn_stack_name} CRMSecurityGroup",returnStdout: true).trim()
            echo "EC2 SecurityGroup ID: ${ec2_sg_arn}"

            if("${prefix}" == "prod"){ //This means we're in the prod account, and prod environment selected
                host_id = bat (script: "@python Python\\get_available_dedicated_host.py ${Region} ${Region}${az} ${InstanceSize}",returnStdout: true).trim()
                echo "Dedicated host ID: ${host_id}"
            }
            else{ 
                host_id = "NoHost"
            }

            subnet_info = bat (script: "@powershell aws ec2 describe-subnets --filters \"Name=vpc-id,Values=${vpc_id} Name=availability-zone,Values=${Region}${az} Name=tag:Name,Values=${service}-${prefix}-private-${Region}${az}\"",returnStdout: true).trim()
            def jsonSlurper = new JsonSlurper()
            def object = jsonSlurper.parseText(subnet_info)
            crm_ec2_subnet_id = object.Subnets.SubnetId[0]
        }
    }

    stage("deploy-crm-ec2-instance"){
        dir("${cfn_repo}"){
            powershell """\
                aws cloudformation deploy `
                --no-fail-on-empty-changeset `
                --stack-name \"${ec2_cfn_stack_name}\" `
                --template-file \"cloudformation\\40-Compute\\ec2-windows.yaml\" `
                --capabilities CAPABILITY_IAM `
                --region ${Region} `
                --parameter-overrides `
                \"Application=${service}\" `
                \"Environment=${prefix}\" `
                \"InstanceType=${InstanceSize}\" `
                \"KeyName=${service}-${prefix}-${Region}\" `
                \"SubnetId=${crm_ec2_subnet_id}\" `
                \"SecurityGroupIds=${ec2_sg_arn}\" `
                \"CostCenter=${cost_center}\" `
                \"Client=Multitenant\" `
                \"ClientId=Multitenant\" `
                \"HostId=${host_id}\" `
                \"AWSBackupRetention=${backup_retention}\" `
                \"AutomaticPatches=${automatic_patch_tag}\" `
                \"PatchGroup=${patch_group_tag}\" `
                \"IamInstanceProfile=${crm_iam_instance_profile}\" `
                \"ResourceName=${resource_name_prefix}crm\" `
                \"ResourceType=Application\" `
                \"Function=CRM\"""".stripIndent()
        }
        dir("${cfn_repo}"){
            ec2_instance_id = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${ec2_cfn_stack_name} Ec2Instance",returnStdout: true).trim()
            ec2_private_ip = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${ec2_cfn_stack_name} Ec2PrivateIP",returnStdout: true).trim()
            ec2_availability_zone = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${ec2_cfn_stack_name} Ec2AvailabilityZone",returnStdout: true).trim()
            echo "EC2 Instance ID: ${ec2_instance_id}"
            echo "EC2 Private IP: ${ec2_private_ip}"
            echo "EC2 Availability Zone: ${ec2_availability_zone}"
        }
    }
    eni:{
        stage("deploy-eni-on-production"){
            dir("${cfn_repo}"){
                if ("${environment}" == "prod"){ // only adding an additional ENI for Production servers as they'll be clustered for HA
                    powershell """\
                        aws cloudformation deploy `
                        --no-fail-on-empty-changeset `
                        --stack-name \"${eni_cfn_stack_name}\" `
                        --template-file \"cloudformation\\40-Compute\\ec2-eni-creation-and-attachment.yaml\" `
                        --capabilities CAPABILITY_IAM `
                        --region ${Region} `
                        --parameter-overrides `
                        \"Application=${service}\" `
                        \"EniDeviceIndex=1" `
                        \"CostCenter=${cost_center}\" `
                        \"Client=Multitenant\" `
                        \"ClientId=Multitenant\" `
                        \"Servername=${resource_name_prefix}crm-eni-1\" `
                        \"SecurityGroupListId=${ec2_sg_arn}\" `
                        \"Ec2InstanceId=${ec2_instance_id}\" `
                        \"SubnetId=${crm_ec2_subnet_id}\"""".stripIndent()
                }
            }
        }
    }
    domain:{
        stage("join-domain"){
            echo "Waiting 2.5 minutes for EC2s to be in a good state before starting domain join task."
            sleep(150)
            echo "Starting domain join and waiting 5 minutes for join to finish."
            build(job: "pipeline-modules/mue-domain-management", propagate: true, parameters: [
                string(name: 'ec2_instance_id', value: "${ec2_instance_id}"),
                string(name: 'domain_join', value: "true"),
                string(name: 'Region', value: "${Region}"),
                string(name: 'computernamesource', value: "byInstanceNameTag"),
            ])
            sleep(300)
        }
    }
    ebs:{
        stage("create-ebs-installation-volume"){
            echo "Creating EBS volume with Windows installation media for EC2"
            dir("${cfn_repo}"){
                powershell """\
                aws cloudformation deploy `
                --no-fail-on-empty-changeset `
                --stack-name \"${ebs_cfn_stack_name}\" `
                --template-file \"cloudformation\\40-Compute\\ec2-ebs-volume.yaml\" `
                --capabilities CAPABILITY_IAM `
                --region ${Region} `
                --parameter-overrides `
                \"Application=${service}\" `
                \"AvailabilityZone=${Region}${az}\" `
                \"Environment=${prefix}\" `
                \"CostCenter=${cost_center}\" `
                \"Client=Multitenant\" `
                \"ClientId=Multitenant\" `
                \"ResourceName=${resource_name_prefix}crm-ebs-install\" `
                \"ResourceType=Application\" `
                \"VolumeSize=6\" `
                \"VolumeType=gp2\" `
                \"Ec2InstanceId=${ec2_instance_id}\" `
                \"Device=xvdh\" `
                \"DeletionPolicy=Snapshot\" `
                \"DriveLabel=Inst\" `
                \"DeviceName=D\" `
                \"DrivePartitionStyle=GPT\" `
                \"DriveAllocationUnitSize=65536\" `
                \"SnapshotId=snap-07a654847fd2dfeee\"""".stripIndent()
            }
            dir("${cfn_repo}"){
                ebs_volume_id = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${ebs_cfn_stack_name} VolumeId",returnStdout: true).trim()
                echo "EBS Volume ID: ${ebs_volume_id}"
            }
        }
    }
    net35:{
        stage("install-net-35"){
            echo "Installing .NET 3.5"
            dir("${cfn_repo}"){
                powershell """\
                \$volumeId = '${ebs_volume_id}'
                \$Volume = Get-EC2Volume -VolumeId \$volumeId

                #wait till volume is available on the EC2
                While (\$Volume.status -ne 'in-use') {            
                    \$Volume = Get-EC2Volume -VolumeId \$volumeId            
                    Start-Sleep -Seconds 10            
                }

                #install .NET 3.5 on EC2 using the EBS with installation media snapshot
                Send-SSMCommand `
                    -InstanceId \"${ec2_instance_id}\" `
                    -DocumentName \"AWS-RunPowerShellScript\" `
                    -Parameter @{commands = \"Install-WindowsFeature Net-Framework-Core -source D:\\sources\\sxs\\\"}
                """.stripIndent() 
            }
        }
    }
    cloudwatch:{
        stage("create-cw-param"){
            echo "Creating Cloudwatch Param Store Entry for Instance"
            dir("${cfn_repo}"){
                powershell """\
                aws cloudformation deploy `
                --no-fail-on-empty-changeset `
                --stack-name \"${ssm_cfn_stack_name}\" `
                --template-file \"cloudformation\\50-SystemsManager\\parameter-store-cw-win-basic.yaml\" `
                --capabilities CAPABILITY_IAM `
                --region ${Region} `
                --parameter-overrides `
                \"Application=${service}\" `
                \"ServerFunction=${prefix}CRM\" `
                \"CostCenter=${cost_center}\" `
                \"ResourceType=Application\" `
                \"LogGroup=${prefix}_CRM\" `
                \"LogPath=C:\\\\ProgramData\\\\Netsmart\\\\Logs\\\\CRMFileWatcher\\\\*.log\"""".stripIndent()
            }
        }
        stage("install-cw"){
            build job: '../pipeline-modules/Install_AWS_Packages_to_EC2', parameters: [
                string(name: 'ec2_instance_id', value: "${ec2_instance_id}"),
                string(name: 'aws_managed_package', value: "AmazonCloudWatchAgent"),
                string(name: 'cw_agent_config', value: "/Cloudwatch/Config/${prefix}CRM/1.0/.json"),
                string(name: 'Region', value: "${Region}")
            ]
        }
    }
}