#!/usr/bin/env groovy
if (env.JENKINS_URL.contains('myunity-bo-prod-jenkins')) {
    environmentA = "prod"
    environmentB = "uat"
    cost_center  = "2016 Hosting - Post Acute"
}
else if (env.JENKINS_URL.contains('myunity-bo-test-jenkins')){
    environmentA = "qa"
    environmentB = "dev"
    cost_center  = "5027 RD - myUnity Homecare and Hospice"
}
else{
    error("Unknown Jenkins instance... Exiting")
}

def checkoutService(gitRepo, gitBranch) {
    //bitbucket account id from jenkins
    def git_credentials_id = "bitbucket_bbcloudapi"
    def gitBranchParameter = "${gitBranch}".toString()
    checkout([$class: 'GitSCM',
          branches: [[name: "${gitBranchParameter}"]],
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [],
          userRemoteConfigs: [[url: "https://bitbucket.org/ntsttech/${gitRepo}.git", credentialsId: "${git_credentials_id}"]],
    ])
}

node(label: 'msbuild'){
    def workspace = "${env.WORKSPACE}"
    def cfn_repo = "${workspace}\\cfn"

    // checkout from git
    stage("checkout-tools"){
        dir("${cfn_repo}"){
            checkoutService("mubo-devops","master")
        }
    }

    stage("gather-info"){
        dir("${cfn_repo}"){
            if ("${environment}" == "prod"){
                prefix = "${environmentA}"
                resource_name_prefix = "p"
            }
            else{
                prefix = "${environmentB}"
                resource_name_prefix = "t"
            }

            service = "myunity"
            iam_cfn_stack_name = "${prefix}-ec2-crm-iam-multitenant"
            sg_cfn_stack_name = "${prefix}-ec2-crm-sg-multitenant"

            vpc_id                  = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${service}-${prefix}-vpc VpcId",returnStdout: true).trim()
            bastion_sg              = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${service}-mgmt-bastion-windows-0 BastionSG",returnStdout: true).trim()
        }
    }

    stage("deploy-crm-ec2-iam-role"){
        dir("${cfn_repo}"){
            powershell """\
                aws cloudformation deploy `
                --no-fail-on-empty-changeset `
                --stack-name \"${iam_cfn_stack_name}\" `
                --template-file \"cloudformation\\20-Security\\ec2-crm-iam.yaml\" `
                --capabilities CAPABILITY_IAM `
                --region ${Region} `
                --parameter-overrides `
                \"Application=${service}\" `
                \"Client=Multitenant\" `
                \"ClientId=Multitenant\" `
                \"ResourceName=${resource_name_prefix}crm-iam\" `
                \"CostCenter=${cost_center}\" `
                \"ResourceType=Application\" `
                \"CRMS3Bucket=${WorkFileRepLocBucketARN}\"""".stripIndent()
        }
    }

    // At some point we need to go through this and the following sg and remove what is duplicated.  This one is tailored to myUnity.
    stage("deploy-crm-ec2-security-groups"){
        dir("${cfn_repo}"){
            powershell """\
                aws cloudformation deploy `
                --no-fail-on-empty-changeset `
                --stack-name \"${sg_cfn_stack_name}\" `
                --template-file \"cloudformation\\20-Security\\ec2-crm-sg.yaml\" `
                --capabilities CAPABILITY_IAM `
                --region ${Region} `
                --parameter-overrides `
                \"Application=${service}\" `
                \"Client=Multitenant\" `
                \"ClientId=Multitenant\" `
                \"ResourceName=${resource_name_prefix}crm-sg\" `
                \"CostCenter=${cost_center}\" `
                \"Environment=${prefix}\" `
                \"ResourceType=Application\" `
                \"VpcId=${vpc_id}\" `
                \"BastionSg=${bastion_sg}\"""".stripIndent()
        }
    }    
}