#!/usr/bin/env groovy
import groovy.json.JsonSlurper
if (env.JENKINS_URL.contains('myunity-bo-prod-jenkins')) {
    environmentA = "prod"
    environmentB = "uat"
    prod_backup_retention = "full"
    nonprod_backup_retention = "14days"
    prod_automatic_patch_tag = "general-prod"
    nonprod_automatic_patch_tag = "general-dev"
    prod_patch_group_tag = "general-windows-prod"
    nonprod_patch_group_tag = "general-windows-dev"
    cost_center  = "2016 Hosting - Post Acute"
    az_odd = "a"
    az_even = "c" // Due to the dedicated host being in AZc needed to switch to AZc for the ec2 also.  Might need to look at switching the test account to mirror PROD AZ configuration.
}
else if (env.JENKINS_URL.contains('myunity-bo-test-jenkins')){
    environmentA = "qa"
    environmentB = "dev"
    prod_backup_retention = "14days"
    nonprod_backup_retention = "14days"
    prod_automatic_patch_tag = "general-dev"
    nonprod_automatic_patch_tag = "general-dev"
    prod_patch_group_tag = "general-windows-dev"
    nonprod_patch_group_tag = "general-windows-dev"
    cost_center  = "5027 RD - myUnity Homecare and Hospice"
    az_odd = "a"
    az_even = "b"
}
else{
    error("Unknown Jenkins instance... Exiting")
}

def checkoutService(gitRepo, gitBranch) {
    //bitbucket account id from jenkins
    echo "Pulling source repo: ${gitRepo}"
    echo "Branch: ${gitBranch}"
    def git_credentials_id = "bitbucket_bbcloudapi"
    def gitBranchParameter = "${gitBranch}".toString()
    checkout([$class: 'GitSCM',
          branches: [[name: "${gitBranchParameter}"]],
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [],
          userRemoteConfigs: [[url: "https://bitbucket.org/ntsttech/${gitRepo}.git", credentialsId: "${git_credentials_id}"]],
    ])
}

node(label: 'msbuild'){
    def workspace = "${env.WORKSPACE}"
    def cfn_repo = "${workspace}\\cfn"

    // checkout from git
    stage("checkout-tools"){
        dir("${cfn_repo}"){
            checkoutService("mubo-devops", scm.branches[0].name)
        }
    }

    stage("gather-info"){
        dir("${cfn_repo}"){
            if ("${environment}" == "prod"){
                prefix = "${environmentA}"
                resource_name_prefix = "p"
                backup_retention = "${prod_backup_retention}"
                automatic_patch_tag = "${prod_automatic_patch_tag}"
                patch_group_tag = "${prod_patch_group_tag}"
            }
            else{
                prefix = "${environmentB}"
                resource_name_prefix = "t"
                backup_retention = "${prod_backup_retention}"
                automatic_patch_tag = "${prod_automatic_patch_tag}"
                patch_group_tag = "${prod_patch_group_tag}"
            }
            l_clusterId = "${ClusterID}".toLowerCase()

            service = "myunity"
            ec2_cfn_stack_name   = "${prefix}-ec2-mssql-instance-multitenant-${l_clusterId}-${ServerNumber}"
            iam_cfn_stack_name   = "${prefix}-ec2-mssql-iam-multitenant"
            sg_cfn_stack_name    = "${prefix}-ec2-mssql-sg-multitenant"
            ebs_M_cfn_stack_name = "${prefix}-ec2-mssql-ebs-M-multitenant-${l_clusterId}-${ServerNumber}"
            ebs_O_cfn_stack_name = "${prefix}-ec2-mssql-ebs-O-multitenant-${l_clusterId}-${ServerNumber}"
            eni_cfn_stack_name = "${prefix}-eni-mssql-instance-multitenant-${l_clusterId}-${ServerNumber}"
            sg_global_sql_platform_cfn_stack_name = "sg-ec2-global-sql-platform-${prefix}"

            vpc_id                  = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${service}-${prefix}-vpc VpcId",returnStdout: true).trim()

            sql_iam_arn                 = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${iam_cfn_stack_name} SqlIamRole",returnStdout: true).trim()
            sql_iam_instance_profile    = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${iam_cfn_stack_name} SqlIamInstanceProfile",returnStdout: true).trim()
            echo "IAM ARN: ${sql_iam_arn}"
            echo "Instance Profile: ${sql_iam_instance_profile}"

            ec2_sg_arn = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${sg_cfn_stack_name} SqlSecurityGroup",returnStdout: true).trim()
            echo "EC2 SecurityGroup ID: ${ec2_sg_arn}"

            sg_global_sql_platform_id = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${sg_global_sql_platform_cfn_stack_name} SecurityGroup",returnStdout: true).trim()
            echo "SQL Global Platform SecurityGroup ID: ${sg_global_sql_platform_id}"

            ServerNumber = ServerNumber.padLeft(2,"0")

            if("${ServerNumber}" == "02"){ //TODO make odd/even
                az = az_even
            }
            else{
                az = az_odd
            }

            if("${prefix}" == "prod"){ //This means we're in the prod account, and prod environment selected
                echo "\"${cfn_repo}\"\\Python\\get_available_dedicated_host.py ${Region} ${Region}${az} ${InstanceSize}"
                host_id = bat (script: "@python \"${cfn_repo}\"\\Python\\get_available_dedicated_host.py ${Region} ${Region}${az} ${InstanceSize}",returnStdout: true).trim()
                echo "Dedicated host ID: ${host_id}"
            }
            else{ 
                host_id = "NoHost"
            }

            subnet_info = bat (script: "@powershell aws ec2 describe-subnets --filters \"Name=vpc-id,Values=${vpc_id} Name=availability-zone,Values=${Region}${az} Name=tag:Name,Values=${service}-${prefix}-private-${Region}${az}\"",returnStdout: true).trim()
            def jsonSlurper = new JsonSlurper()
            def object = jsonSlurper.parseText(subnet_info)
            sql_ec2_subnet_id = object.Subnets.SubnetId[0]
            echo "AZ:${Region}${az}     Subnet Name: ${service}-${prefix}-rds-${Region}${az}     Subnet ID: ${sql_ec2_subnet_id}"
        }
    }

    stage("deploy-mssql-ec2-instances"){
        dir("${cfn_repo}"){
            powershell """\
                aws cloudformation deploy `
                --no-fail-on-empty-changeset `
                --stack-name \"${ec2_cfn_stack_name}\" `
                --template-file \"cloudformation\\40-Compute\\ec2-windows.yaml\" `
                --capabilities CAPABILITY_IAM `
                --region ${Region} `
                --parameter-overrides `
                \"Application=${service}\" `
                \"Environment=${prefix}\" `
                \"InstanceType=${InstanceSize}\" `
                \"KeyName=${service}-${prefix}-${Region}\" `
                \"SubnetId=${sql_ec2_subnet_id}\" `
                \"SecurityGroupIds=${ec2_sg_arn},${sg_global_sql_platform_id}\" `
                \"CostCenter=${cost_center}\" `
                \"Client=Multitenant\" `
                \"ClientId=Multitenant\" `
                \"HostId=${host_id}\" `
                \"AWSBackupRetention=${backup_retention}\" `
                \"AutomaticPatches=${automatic_patch_tag}\" `
                \"PatchGroup=${patch_group_tag}\" `
                \"IamInstanceProfile=${sql_iam_instance_profile}\" `
                \"ResourceName=${resource_name_prefix}vmuemdbw${l_clusterId}${ServerNumber}\" `
                \"ResourceType=Application\" `
                \"Function=Database-MSSQL\" `
                \"InstanceId=${ServerNumber}\"""".stripIndent()

            ec2_instance_id = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${ec2_cfn_stack_name} Ec2Instance",returnStdout: true).trim()
            ec2_private_ip = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${ec2_cfn_stack_name} Ec2PrivateIP",returnStdout: true).trim()
            ec2_availability_zone = bat (script: "@python \"${cfn_repo}\"\\Python\\get_cfnstack_output_value_by_key.py ${Region} ${ec2_cfn_stack_name} Ec2AvailabilityZone",returnStdout: true).trim()
            echo "EC2 Instance ID: ${ec2_instance_id}"
            echo "EC2 Private IP: ${ec2_private_ip}"
            echo "EC2 Availability Zone: ${ec2_availability_zone}"
        }
    }
    parallel ebs: {
        stage("deploy-ebs-volumes"){
            dir("${cfn_repo}"){
                parallel([
                    drive_M: {
                        powershell """\
                            aws cloudformation deploy `
                            --no-fail-on-empty-changeset `
                            --stack-name \"${ebs_M_cfn_stack_name}\" `
                            --template-file \"cloudformation\\40-Compute\\ec2-ebs-volume.yaml\" `
                            --capabilities CAPABILITY_IAM `
                            --region ${Region} `
                            --parameter-overrides `
                            \"Application=${service}\" `
                            \"AvailabilityZone=${ec2_availability_zone}\" `
                            \"Environment=${prefix}\" `
                            \"CostCenter=${cost_center}\" `
                            \"Client=Multitenant\" `
                            \"ClientId=Multitenant\" `
                            \"ResourceName=${resource_name_prefix}vmuemdbw${l_clusterId}${ServerNumber}-drive-M\" `
                            \"ResourceType=Application\" `
                            \"Ec2InstanceId=${ec2_instance_id}\" `
                            \"VolumeSize=${driveMsize}\" `
                            \"VolumeType=${driveMtype}\" `
                            \"DriveLabel=Data\" `
                            \"DeviceName=M\" `
                            \"DrivePartitionStyle=GPT\" `
                            \"DriveAllocationUnitSize=65536\" `
                            \"Iops=3000\" `
                            \"Device=xvdm\" `
                            \"DeletionPolicy=Snapshot\"""".stripIndent()
                    },
                    drive_O: {
                    powershell """\
                        aws cloudformation deploy `
                        --no-fail-on-empty-changeset `
                        --stack-name \"${ebs_O_cfn_stack_name}\" `
                        --template-file \"cloudformation\\40-Compute\\ec2-ebs-volume.yaml\" `
                        --capabilities CAPABILITY_IAM `
                        --region ${Region} `
                        --parameter-overrides `
                        \"Application=${service}\" `
                        \"AvailabilityZone=${ec2_availability_zone}\" `
                        \"Environment=${prefix}\" `
                        \"CostCenter=${cost_center}\" `
                        \"Client=Multitenant\" `
                        \"ClientId=Multitenant\" `
                        \"ResourceName=${resource_name_prefix}vmuemdbw${l_clusterId}${ServerNumber}-drive-O\" `
                        \"ResourceType=Application\" `
                        \"Ec2InstanceId=${ec2_instance_id}\" `
                        \"VolumeSize=${driveOsize}\" `
                        \"VolumeType=${driveOtype}\" `
                        \"DriveLabel=TempDB\" `
                        \"DeviceName=O\" `
                        \"DrivePartitionStyle=GPT\" `
                        \"DriveAllocationUnitSize=65536\" `
                        \"Iops=3000\" `
                        \"Device=xvdo\" `
                        \"DeletionPolicy=Snapshot\"""".stripIndent()
                    },
                ])
            }
        }
    },
    domain:{
        stage("join-domain"){
            echo "Waiting 2.5 minutes for EC2s to be in a good state before starting domain join task."
            sleep(150)
            echo "Starting domain join and waiting 5 minutes for join to finish."
            build(job: "pipeline-modules/mue-domain-management", propagate: true, parameters: [
                string(name: 'ec2_instance_id', value: "${ec2_instance_id}"),
                string(name: 'domain_join', value: "true"),
                string(name: 'Region', value: "${Region}"),
                string(name: 'computernamesource', value: "byInstanceNameTag"),
            ])
            sleep(300)
        }
    }
}